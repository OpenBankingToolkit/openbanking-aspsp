/**
 * Copyright 2019 ForgeRock AS.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.forgerock.openbanking.register.api.manual;

import com.forgerock.openbanking.common.error.exception.oauth2.OAuth2BearerTokenUsageInvalidTokenException;
import com.forgerock.openbanking.common.error.exception.oauth2.OAuth2BearerTokenUsageMissingAuthInfoException;
import com.forgerock.openbanking.common.error.exception.oauth2.OAuth2InvalidClientException;
import com.forgerock.openbanking.common.model.onboarding.ManualRegistrationApplication;
import com.forgerock.openbanking.common.model.onboarding.ManualRegistrationRequest;
import com.forgerock.openbanking.exceptions.OBErrorException;
import com.forgerock.openbanking.exceptions.OBErrorResponseException;
import com.forgerock.openbanking.model.oidc.OIDCRegistrationResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.security.Principal;
import java.util.Collection;


@Api(tags = "Registration", description = "the manual registration API")
public interface ManualRegistrationApi {

    @ApiOperation(
            value = "Determine the organisational Identifier of the certificate presented",
            notes = "The user of the register endpoint will see all of the applications registered for their " +
                    "organisation",
            tags = {"Registration"}
    )
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Organizational Identifier returned with success", response = String.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = Void.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Void.class)
    })
    ResponseEntity<String> getOrganizationIdentifier(
        Principal principal
    ) throws OAuth2InvalidClientException;


    @ApiOperation(
            value = "Register a new TPP via manual onboarding",
            notes = "Protected by the Open Banking directory",
            tags = {"Registration",}
    )
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "TPP registered with success",
                    response = OIDCRegistrationResponse.class),
            @ApiResponse(code = 400, message = "Bad Request", response = Void.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
            @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
            @ApiResponse(code = 405, message = "Method Not Allowed", response = Void.class),
            @ApiResponse(code = 406, message = "Not Acceptable", response = Void.class),
            @ApiResponse(code = 429, message = "Too Many Requests", response = Void.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = Void.class)
    })

    @PreAuthorize("hasAnyAuthority('ROLE_USER')")
    @RequestMapping(
            value = "/open-banking/manual-onboarding/registerApplication",
            produces = {"application/json; charset=utf-8"},
            consumes = {"application/json; charset=utf-8"},
            method = RequestMethod.POST
    )
    ResponseEntity<ManualRegistrationApplication> registerApplication(
            @ApiParam(value = "Registration request", required = true)
            @Valid
            @RequestBody ManualRegistrationRequest manualRegistrationRequest,

//            @ApiParam(value="The SSL tranport pem used to connect to this endpoint", required = true)
//            @Valid
//            @RequestHeader(value="x-client-pem-cert", required = true) String clientPem,

            @CookieValue(value = "obri-session", required = true) String obriSession,


            Principal principal
    ) throws OBErrorResponseException, OBErrorException, OAuth2InvalidClientException;

    @PreAuthorize("hasAnyAuthority('ROLE_USER')")
    @RequestMapping(
            value = "/open-banking/manual-onboarding/registerApplication/{applicationId}",
            method = RequestMethod.DELETE
    )
    ResponseEntity<ManualRegistrationApplication> unregisterApplication(
            @ApiParam(value = "Unregister application", required = true)
            @Valid
            @PathVariable(value = "applicationId") String applicationId,

            @CookieValue(value = "obri-session", required = true) String obriSession,

            Principal principal
    ) throws OBErrorResponseException, OAuth2InvalidClientException, OAuth2BearerTokenUsageMissingAuthInfoException, OAuth2BearerTokenUsageInvalidTokenException;


    @PreAuthorize("hasAnyAuthority('ROLE_USER')")
    @RequestMapping(
            value = "/open-banking/manual-onboarding/registerApplication/{applicationId}",
            method = RequestMethod.GET
    )
    ResponseEntity<ManualRegistrationApplication> getApplication(
            @ApiParam(value = "Unregister application", required = true)
            @Valid
            @PathVariable(value = "applicationId") String applicationId,

            @CookieValue(value = "obri-session", required = true) String obriSession,

            Principal principal
    ) throws OBErrorResponseException, OAuth2InvalidClientException;

    @PreAuthorize("hasAnyAuthority('ROLE_USER')")
    @RequestMapping(
            value = "/open-banking/manual-onboarding/registerApplication",
            method = RequestMethod.GET
    )
    ResponseEntity<Collection<ManualRegistrationApplication>> getApplications(
            @CookieValue(value = "obri-session", required = true) String obriSession,
            Principal principal
    ) throws OBErrorResponseException, OAuth2InvalidClientException;
}

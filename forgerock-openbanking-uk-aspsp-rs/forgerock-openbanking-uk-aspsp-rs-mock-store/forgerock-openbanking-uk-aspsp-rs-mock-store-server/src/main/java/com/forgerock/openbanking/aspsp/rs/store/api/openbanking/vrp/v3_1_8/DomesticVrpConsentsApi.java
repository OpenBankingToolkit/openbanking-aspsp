/**
 * Copyright 2019 ForgeRock AS.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.forgerock.openbanking.aspsp.rs.store.api.openbanking.vrp.v3_1_8;

import com.forgerock.openbanking.exceptions.OBErrorResponseException;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import uk.org.openbanking.datamodel.vrp.OBDomesticVRPConsentRequest;
import uk.org.openbanking.datamodel.vrp.OBDomesticVRPConsentResponse;
import uk.org.openbanking.datamodel.vrp.OBVRPFundsConfirmationRequest;

import javax.validation.Valid;

import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.POST;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-05-27T13:44:23.551801+01:00[Europe/London]")

@Api(value = "domestic-vrp-consents", description = "the domestic-vrp-consents API")
public interface DomesticVrpConsentsApi {

    static String DOMESTIC_VRP_CONSENTS = "/domestic-vrp-consents";

    /**
     * POST /domestic-vrp-consents : create a domestic vrp
     * create a domestic vrp
     *
     * @return (status code 201)
     */
    @ApiOperation(
            value = "create a domestic vrp",
            nickname = "domesticVrpConsentsPost",
            notes = "create a domestic vrp",
            response = OBDomesticVRPConsentResponse.class,
//            authorizations = {
//                    @Authorization(value = "TPPOAuth2Security", scopes = {
//                            @AuthorizationScope(scope = "vrps", description = "Generic VRPs scope")
//                    })
//            },
            tags = {"variable-recurring-payments",})
    @ApiResponses(value = {@ApiResponse(code = 201, message = "", response = OBDomesticVRPConsentResponse.class)})
    @RequestMapping(
            value = DOMESTIC_VRP_CONSENTS,
            produces = {"application/json"},
            method = POST)
    ResponseEntity<OBDomesticVRPConsentResponse> createDomesticVrpConsent(
            @ApiParam(value = "Default", required = true)
            @Valid
            @RequestBody OBDomesticVRPConsentRequest domesticVRPConsentRequest // added manually
            // none of the headers have been generated from the open-api spec
    ) throws OBErrorResponseException;

    /**
     * GET /domestic-vrp-consents/:consentId : create a domestic vrp
     * create a domestic vrp
     *
     * @return (status code 200)
     */
    @ApiOperation(
            value = "create a domestic vrp",
            nickname = "domesticVrpConsentsConsentIdGet",
            notes = "create a domestic vrp",
            response = OBDomesticVRPConsentResponse.class,
//            authorizations = {
//                    @Authorization(value = "TPPOAuth2Security", scopes = {
//                            @AuthorizationScope(scope = "vrps", description = "Generic VRPs scope")
//                    })
//            },
            tags = {"variable-recurring-payments",})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "", response = OBDomesticVRPConsentResponse.class)})
    @RequestMapping(
            value = DOMESTIC_VRP_CONSENTS + "/:consentId",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<OBDomesticVRPConsentResponse> getDomesticVrpConsent() throws OBErrorResponseException;

    /**
     * DELETE /domestic-vrp-consents/:consentId : create a domestic vrp
     * create a domestic vrp
     *
     * @return all good (status code 204)
     */
    @ApiOperation(
            value = "create a domestic vrp",
            nickname = "domesticVrpConsentsConsentIdDelete",
            notes = "create a domestic vrp",
//            authorizations = {
//                    @Authorization(value = "TPPOAuth2Security", scopes = {
//                            @AuthorizationScope(scope = "vrps", description = "Generic VRPs scope")
//                    })
//            },
            tags = {"variable-recurring-payments",})
    @ApiResponses(value = {@ApiResponse(code = 204, message = "all good")})
    @RequestMapping(value = DOMESTIC_VRP_CONSENTS + "/:consentId", method = DELETE)
    ResponseEntity<Void> deleteDomesticVrpConsent() throws OBErrorResponseException;

    /**
     * POST /domestic-vrp-consents/:consentId/funds-confirmation : create a domestic vrp
     * create a domestic vrp
     *
     * @return (status code 200)
     */
    @ApiOperation(
            value = "create a domestic vrp",
            nickname = "domesticVrpConsentsConsentIdFundsConfirmationPost",
            notes = "create a domestic vrp",
            response = Object.class,
//            authorizations = {
//                    @Authorization(value = "TPPOAuth2Security", scopes = {
//                            @AuthorizationScope(scope = "vrps", description = "Generic VRPs scope")
//                    })
//            },
            tags = {"variable-recurring-payments",})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "", response = Object.class)})
    @RequestMapping(
            value = DOMESTIC_VRP_CONSENTS + "/:consentId/funds-confirmation",
            produces = {"application/json"},
            method = POST)
    ResponseEntity<Object> createDomesticVrpConsentsConsentFundsConfirmation(
            @ApiParam(value = "Default", required = true)
            @Valid
            @RequestBody OBVRPFundsConfirmationRequest vrpFundsConfirmationRequest) throws OBErrorResponseException;

}

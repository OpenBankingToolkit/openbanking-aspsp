/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.forgerock.openbanking.aspsp.rs.api.vrp;

import uk.org.openbanking.datamodel.vrp.OBDomesticVRPConsentRequest;
import uk.org.openbanking.datamodel.vrp.OBDomesticVRPConsentResponse;
import uk.org.openbanking.datamodel.vrp.OBErrorResponse1;
import uk.org.openbanking.datamodel.vrp.OBVRPFundsConfirmationRequest;
import uk.org.openbanking.datamodel.vrp.OBVRPFundsConfirmationResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-11-17T13:54:56.728Z[Europe/London]")
@Validated
@Api(value = "domestic-vrp-consents", description = "the domestic-vrp-consents API")
public interface DomesticVrpConsentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /domestic-vrp-consents/{ConsentId} : Delete a domestic VRP
     * Delete a domestic VRP
     *
     * @param consentId ConsentId (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiAuthDate The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param xCustomerUserAgent Indicates the user-agent that the PSU is using. (optional)
     * @return delete successful (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Method Not Allowed (status code 405)
     *         or Not Acceptable (status code 406)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Delete a domestic VRP", nickname = "domesticVrpConsentsDelete", notes = "Delete a domestic VRP", authorizations = {
        @Authorization(value = "TPPOAuth2Security", scopes = {
            @AuthorizationScope(scope = "payments", description = "Generic payment scope") })
         }, tags={ "Domestic VRP Consents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "delete successful"),
        @ApiResponse(code = 400, message = "Bad request", response = OBErrorResponse1.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden", response = OBErrorResponse1.class),
        @ApiResponse(code = 405, message = "Method Not Allowed"),
        @ApiResponse(code = 406, message = "Not Acceptable"),
        @ApiResponse(code = 415, message = "Unsupported Media Type"),
        @ApiResponse(code = 429, message = "Too Many Requests"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = OBErrorResponse1.class) })
    @DeleteMapping(
        value = "/domestic-vrp-consents/{ConsentId}",
        produces = { "application/json; charset=utf-8", "application/json", "application/jose+jwe" }
    )
    default ResponseEntity<Void> domesticVrpConsentsDelete(@ApiParam(value = "ConsentId",required=true) @PathVariable("ConsentId") String consentId,@ApiParam(value = "An Authorisation Token as per https://tools.ietf.org/html/rfc6750" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC" ) @RequestHeader(value="x-fapi-auth-date", required=false) String xFapiAuthDate,@ApiParam(value = "The PSU's IP address if the PSU is currently logged in with the TPP." ) @RequestHeader(value="x-fapi-customer-ip-address", required=false) String xFapiCustomerIpAddress,@ApiParam(value = "An RFC4122 UID used as a correlation id." ) @RequestHeader(value="x-fapi-interaction-id", required=false) String xFapiInteractionId,@ApiParam(value = "Indicates the user-agent that the PSU is using." ) @RequestHeader(value="x-customer-user-agent", required=false) String xCustomerUserAgent) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /domestic-vrp-consents/{ConsentId}/funds-confirmation : Confirm availability of funds for a VRP
     * Confirm availability of funds for a VRP
     *
     * @param consentId ConsentId (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xJwsSignature A detached JWS signature of the body of the payload. (required)
     * @param obVRPFundsConfirmationRequest Default (required)
     * @param xFapiAuthDate The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param xCustomerUserAgent Indicates the user-agent that the PSU is using. (optional)
     * @return Default response (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Method Not Allowed (status code 405)
     *         or Not Acceptable (status code 406)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Confirm availability of funds for a VRP", nickname = "domesticVrpConsentsFundsConfirmation", notes = "Confirm availability of funds for a VRP", response = OBVRPFundsConfirmationResponse.class, authorizations = {
        @Authorization(value = "TPPOAuth2Security", scopes = {
            @AuthorizationScope(scope = "payments", description = "Generic payment scope") })
         }, tags={ "Domestic VRP Consents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Default response", response = OBVRPFundsConfirmationResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = OBErrorResponse1.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden", response = OBErrorResponse1.class),
        @ApiResponse(code = 405, message = "Method Not Allowed"),
        @ApiResponse(code = 406, message = "Not Acceptable"),
        @ApiResponse(code = 415, message = "Unsupported Media Type"),
        @ApiResponse(code = 429, message = "Too Many Requests"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = OBErrorResponse1.class) })
    @PostMapping(
        value = "/domestic-vrp-consents/{ConsentId}/funds-confirmation",
        produces = { "application/json; charset=utf-8", "application/json", "application/jose+jwe" },
        consumes = { "application/json; charset=utf-8", "application/json", "application/jose+jwe" }
    )
    default ResponseEntity<OBVRPFundsConfirmationResponse> domesticVrpConsentsFundsConfirmation(@ApiParam(value = "ConsentId",required=true) @PathVariable("ConsentId") String consentId,@ApiParam(value = "An Authorisation Token as per https://tools.ietf.org/html/rfc6750" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "A detached JWS signature of the body of the payload." ,required=true) @RequestHeader(value="x-jws-signature", required=true) String xJwsSignature,@ApiParam(value = "Default" ,required=true )  @Valid @RequestBody OBVRPFundsConfirmationRequest obVRPFundsConfirmationRequest,@ApiParam(value = "The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC" ) @RequestHeader(value="x-fapi-auth-date", required=false) String xFapiAuthDate,@ApiParam(value = "The PSU's IP address if the PSU is currently logged in with the TPP." ) @RequestHeader(value="x-fapi-customer-ip-address", required=false) String xFapiCustomerIpAddress,@ApiParam(value = "An RFC4122 UID used as a correlation id." ) @RequestHeader(value="x-fapi-interaction-id", required=false) String xFapiInteractionId,@ApiParam(value = "Indicates the user-agent that the PSU is using." ) @RequestHeader(value="x-customer-user-agent", required=false) String xCustomerUserAgent) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Data\" : { \"FundsConfirmationId\" : \"FundsConfirmationId\", \"CreationDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"FundsAvailableResult\" : { \"FundsAvailableDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"FundsAvailable\" : \"Available\" }, \"Reference\" : \"Reference\", \"ConsentId\" : \"ConsentId\", \"InstructedAmount\" : { \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"Data\" : { \"FundsConfirmationId\" : \"FundsConfirmationId\", \"CreationDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"FundsAvailableResult\" : { \"FundsAvailableDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"FundsAvailable\" : \"Available\" }, \"Reference\" : \"Reference\", \"ConsentId\" : \"ConsentId\", \"InstructedAmount\" : { \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /domestic-vrp-consents/{ConsentId} : Retrieve a domestic VRP consent
     * Retrieve a domestic VRP consent
     *
     * @param consentId ConsentId (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiAuthDate The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param xCustomerUserAgent Indicates the user-agent that the PSU is using. (optional)
     * @return Default response (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Method Not Allowed (status code 405)
     *         or Not Acceptable (status code 406)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Retrieve a domestic VRP consent", nickname = "domesticVrpConsentsGet", notes = "Retrieve a domestic VRP consent", response = OBDomesticVRPConsentResponse.class, authorizations = {
        @Authorization(value = "TPPOAuth2Security", scopes = {
            @AuthorizationScope(scope = "payments", description = "Generic payment scope") })
         }, tags={ "Domestic VRP Consents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = OBDomesticVRPConsentResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = OBErrorResponse1.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden", response = OBErrorResponse1.class),
        @ApiResponse(code = 405, message = "Method Not Allowed"),
        @ApiResponse(code = 406, message = "Not Acceptable"),
        @ApiResponse(code = 415, message = "Unsupported Media Type"),
        @ApiResponse(code = 429, message = "Too Many Requests"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = OBErrorResponse1.class) })
    @GetMapping(
        value = "/domestic-vrp-consents/{ConsentId}",
        produces = { "application/json; charset=utf-8", "application/json", "application/jose+jwe" }
    )
    default ResponseEntity<OBDomesticVRPConsentResponse> domesticVrpConsentsGet(@ApiParam(value = "ConsentId",required=true) @PathVariable("ConsentId") String consentId,@ApiParam(value = "An Authorisation Token as per https://tools.ietf.org/html/rfc6750" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC" ) @RequestHeader(value="x-fapi-auth-date", required=false) String xFapiAuthDate,@ApiParam(value = "The PSU's IP address if the PSU is currently logged in with the TPP." ) @RequestHeader(value="x-fapi-customer-ip-address", required=false) String xFapiCustomerIpAddress,@ApiParam(value = "An RFC4122 UID used as a correlation id." ) @RequestHeader(value="x-fapi-interaction-id", required=false) String xFapiInteractionId,@ApiParam(value = "Indicates the user-agent that the PSU is using." ) @RequestHeader(value="x-customer-user-agent", required=false) String xCustomerUserAgent) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Meta\" : \"{}\", \"Risk\" : { \"PaymentContextCode\" : \"BillPayment\", \"DeliveryAddress\" : { \"StreetName\" : \"StreetName\", \"CountrySubDivision\" : \"CountrySubDivision\", \"AddressLine\" : [ \"AddressLine\", \"AddressLine\" ], \"BuildingNumber\" : \"BuildingNumber\", \"TownName\" : \"TownName\", \"Country\" : \"Country\", \"PostCode\" : \"PostCode\" }, \"MerchantCategoryCode\" : \"MerchantCategoryCode\", \"MerchantCustomerIdentification\" : \"MerchantCustomerIdentification\" }, \"Links\" : { \"Last\" : \"https://openapi-generator.tech\", \"Prev\" : \"https://openapi-generator.tech\", \"Next\" : \"https://openapi-generator.tech\", \"Self\" : \"https://openapi-generator.tech\", \"First\" : \"https://openapi-generator.tech\" }, \"Data\" : { \"Status\" : \"Status\", \"StatusUpdateDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"DebtorAccount\" : { \"SecondaryIdentification\" : \"SecondaryIdentification\", \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" }, \"CreationDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"ControlParameters\" : { \"SupplementaryData\" : \"{}\", \"ValidToDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"PSUAuthenticationMethods\" : [ \"PSUAuthenticationMethods\", \"PSUAuthenticationMethods\" ], \"ValidFromDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"VRPType\" : [ \"VRPType\", \"VRPType\" ], \"MaximumIndividualAmount\" : { \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" }, \"PeriodicLimits\" : [ { \"PeriodAlignment\" : \"Consent\", \"PeriodType\" : \"Day\", \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" }, { \"PeriodAlignment\" : \"Consent\", \"PeriodType\" : \"Day\", \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" } ] }, \"ReadRefundAccount\" : \"true\", \"ConsentId\" : \"ConsentId\", \"Initiation\" : { \"DebtorAccount\" : { \"SecondaryIdentification\" : \"SecondaryIdentification\", \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" }, \"CreditorAgent\" : { \"PostalAddress\" : { \"StreetName\" : \"StreetName\", \"CountrySubDivision\" : \"CountrySubDivision\", \"Department\" : \"Department\", \"AddressLine\" : [ \"AddressLine\", \"AddressLine\", \"AddressLine\", \"AddressLine\", \"AddressLine\" ], \"BuildingNumber\" : \"BuildingNumber\", \"TownName\" : \"TownName\", \"Country\" : \"Country\", \"SubDepartment\" : \"SubDepartment\", \"AddressType\" : \"AddressType\", \"PostCode\" : \"PostCode\" }, \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" }, \"RemittanceInformation\" : { \"Unstructured\" : \"Unstructured\", \"Reference\" : \"Reference\" }, \"CreditorAccount\" : { \"SecondaryIdentification\" : \"SecondaryIdentification\", \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" } } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"Meta\" : \"{}\", \"Risk\" : { \"PaymentContextCode\" : \"BillPayment\", \"DeliveryAddress\" : { \"StreetName\" : \"StreetName\", \"CountrySubDivision\" : \"CountrySubDivision\", \"AddressLine\" : [ \"AddressLine\", \"AddressLine\" ], \"BuildingNumber\" : \"BuildingNumber\", \"TownName\" : \"TownName\", \"Country\" : \"Country\", \"PostCode\" : \"PostCode\" }, \"MerchantCategoryCode\" : \"MerchantCategoryCode\", \"MerchantCustomerIdentification\" : \"MerchantCustomerIdentification\" }, \"Links\" : { \"Last\" : \"https://openapi-generator.tech\", \"Prev\" : \"https://openapi-generator.tech\", \"Next\" : \"https://openapi-generator.tech\", \"Self\" : \"https://openapi-generator.tech\", \"First\" : \"https://openapi-generator.tech\" }, \"Data\" : { \"Status\" : \"Status\", \"StatusUpdateDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"DebtorAccount\" : { \"SecondaryIdentification\" : \"SecondaryIdentification\", \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" }, \"CreationDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"ControlParameters\" : { \"SupplementaryData\" : \"{}\", \"ValidToDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"PSUAuthenticationMethods\" : [ \"PSUAuthenticationMethods\", \"PSUAuthenticationMethods\" ], \"ValidFromDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"VRPType\" : [ \"VRPType\", \"VRPType\" ], \"MaximumIndividualAmount\" : { \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" }, \"PeriodicLimits\" : [ { \"PeriodAlignment\" : \"Consent\", \"PeriodType\" : \"Day\", \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" }, { \"PeriodAlignment\" : \"Consent\", \"PeriodType\" : \"Day\", \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" } ] }, \"ReadRefundAccount\" : \"true\", \"ConsentId\" : \"ConsentId\", \"Initiation\" : { \"DebtorAccount\" : { \"SecondaryIdentification\" : \"SecondaryIdentification\", \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" }, \"CreditorAgent\" : { \"PostalAddress\" : { \"StreetName\" : \"StreetName\", \"CountrySubDivision\" : \"CountrySubDivision\", \"Department\" : \"Department\", \"AddressLine\" : [ \"AddressLine\", \"AddressLine\", \"AddressLine\", \"AddressLine\", \"AddressLine\" ], \"BuildingNumber\" : \"BuildingNumber\", \"TownName\" : \"TownName\", \"Country\" : \"Country\", \"SubDepartment\" : \"SubDepartment\", \"AddressType\" : \"AddressType\", \"PostCode\" : \"PostCode\" }, \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" }, \"RemittanceInformation\" : { \"Unstructured\" : \"Unstructured\", \"Reference\" : \"Reference\" }, \"CreditorAccount\" : { \"SecondaryIdentification\" : \"SecondaryIdentification\", \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" } } } }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /domestic-vrp-consents : Create a domestic VRP consent
     * Create a domestic VRP consent
     *
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xIdempotencyKey Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours.  (required)
     * @param xJwsSignature A detached JWS signature of the body of the payload. (required)
     * @param obDomesticVRPConsentRequest Default (required)
     * @param xFapiAuthDate The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param xCustomerUserAgent Indicates the user-agent that the PSU is using. (optional)
     * @return Default response (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Method Not Allowed (status code 405)
     *         or Not Acceptable (status code 406)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Create a domestic VRP consent", nickname = "domesticVrpConsentsPost", notes = "Create a domestic VRP consent", response = OBDomesticVRPConsentResponse.class, authorizations = {
        @Authorization(value = "TPPOAuth2Security", scopes = {
            @AuthorizationScope(scope = "payments", description = "Generic payment scope") })
         }, tags={ "Domestic VRP Consents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Default response", response = OBDomesticVRPConsentResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = OBErrorResponse1.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden", response = OBErrorResponse1.class),
        @ApiResponse(code = 405, message = "Method Not Allowed"),
        @ApiResponse(code = 406, message = "Not Acceptable"),
        @ApiResponse(code = 415, message = "Unsupported Media Type"),
        @ApiResponse(code = 429, message = "Too Many Requests"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = OBErrorResponse1.class) })
    @PostMapping(
        value = "/domestic-vrp-consents",
        produces = { "application/json; charset=utf-8", "application/json", "application/jose+jwe" },
        consumes = { "application/json; charset=utf-8", "application/json", "application/jose+jwe" }
    )
    default ResponseEntity<OBDomesticVRPConsentResponse> domesticVrpConsentsPost(@ApiParam(value = "An Authorisation Token as per https://tools.ietf.org/html/rfc6750" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. " ,required=true) @RequestHeader(value="x-idempotency-key", required=true) String xIdempotencyKey,@ApiParam(value = "A detached JWS signature of the body of the payload." ,required=true) @RequestHeader(value="x-jws-signature", required=true) String xJwsSignature,@ApiParam(value = "Default" ,required=true )  @Valid @RequestBody OBDomesticVRPConsentRequest obDomesticVRPConsentRequest,@ApiParam(value = "The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC" ) @RequestHeader(value="x-fapi-auth-date", required=false) String xFapiAuthDate,@ApiParam(value = "The PSU's IP address if the PSU is currently logged in with the TPP." ) @RequestHeader(value="x-fapi-customer-ip-address", required=false) String xFapiCustomerIpAddress,@ApiParam(value = "An RFC4122 UID used as a correlation id." ) @RequestHeader(value="x-fapi-interaction-id", required=false) String xFapiInteractionId,@ApiParam(value = "Indicates the user-agent that the PSU is using." ) @RequestHeader(value="x-customer-user-agent", required=false) String xCustomerUserAgent) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Meta\" : \"{}\", \"Risk\" : { \"PaymentContextCode\" : \"BillPayment\", \"DeliveryAddress\" : { \"StreetName\" : \"StreetName\", \"CountrySubDivision\" : \"CountrySubDivision\", \"AddressLine\" : [ \"AddressLine\", \"AddressLine\" ], \"BuildingNumber\" : \"BuildingNumber\", \"TownName\" : \"TownName\", \"Country\" : \"Country\", \"PostCode\" : \"PostCode\" }, \"MerchantCategoryCode\" : \"MerchantCategoryCode\", \"MerchantCustomerIdentification\" : \"MerchantCustomerIdentification\" }, \"Links\" : { \"Last\" : \"https://openapi-generator.tech\", \"Prev\" : \"https://openapi-generator.tech\", \"Next\" : \"https://openapi-generator.tech\", \"Self\" : \"https://openapi-generator.tech\", \"First\" : \"https://openapi-generator.tech\" }, \"Data\" : { \"Status\" : \"Status\", \"StatusUpdateDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"DebtorAccount\" : { \"SecondaryIdentification\" : \"SecondaryIdentification\", \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" }, \"CreationDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"ControlParameters\" : { \"SupplementaryData\" : \"{}\", \"ValidToDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"PSUAuthenticationMethods\" : [ \"PSUAuthenticationMethods\", \"PSUAuthenticationMethods\" ], \"ValidFromDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"VRPType\" : [ \"VRPType\", \"VRPType\" ], \"MaximumIndividualAmount\" : { \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" }, \"PeriodicLimits\" : [ { \"PeriodAlignment\" : \"Consent\", \"PeriodType\" : \"Day\", \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" }, { \"PeriodAlignment\" : \"Consent\", \"PeriodType\" : \"Day\", \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" } ] }, \"ReadRefundAccount\" : \"true\", \"ConsentId\" : \"ConsentId\", \"Initiation\" : { \"DebtorAccount\" : { \"SecondaryIdentification\" : \"SecondaryIdentification\", \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" }, \"CreditorAgent\" : { \"PostalAddress\" : { \"StreetName\" : \"StreetName\", \"CountrySubDivision\" : \"CountrySubDivision\", \"Department\" : \"Department\", \"AddressLine\" : [ \"AddressLine\", \"AddressLine\", \"AddressLine\", \"AddressLine\", \"AddressLine\" ], \"BuildingNumber\" : \"BuildingNumber\", \"TownName\" : \"TownName\", \"Country\" : \"Country\", \"SubDepartment\" : \"SubDepartment\", \"AddressType\" : \"AddressType\", \"PostCode\" : \"PostCode\" }, \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" }, \"RemittanceInformation\" : { \"Unstructured\" : \"Unstructured\", \"Reference\" : \"Reference\" }, \"CreditorAccount\" : { \"SecondaryIdentification\" : \"SecondaryIdentification\", \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" } } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"Meta\" : \"{}\", \"Risk\" : { \"PaymentContextCode\" : \"BillPayment\", \"DeliveryAddress\" : { \"StreetName\" : \"StreetName\", \"CountrySubDivision\" : \"CountrySubDivision\", \"AddressLine\" : [ \"AddressLine\", \"AddressLine\" ], \"BuildingNumber\" : \"BuildingNumber\", \"TownName\" : \"TownName\", \"Country\" : \"Country\", \"PostCode\" : \"PostCode\" }, \"MerchantCategoryCode\" : \"MerchantCategoryCode\", \"MerchantCustomerIdentification\" : \"MerchantCustomerIdentification\" }, \"Links\" : { \"Last\" : \"https://openapi-generator.tech\", \"Prev\" : \"https://openapi-generator.tech\", \"Next\" : \"https://openapi-generator.tech\", \"Self\" : \"https://openapi-generator.tech\", \"First\" : \"https://openapi-generator.tech\" }, \"Data\" : { \"Status\" : \"Status\", \"StatusUpdateDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"DebtorAccount\" : { \"SecondaryIdentification\" : \"SecondaryIdentification\", \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" }, \"CreationDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"ControlParameters\" : { \"SupplementaryData\" : \"{}\", \"ValidToDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"PSUAuthenticationMethods\" : [ \"PSUAuthenticationMethods\", \"PSUAuthenticationMethods\" ], \"ValidFromDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"VRPType\" : [ \"VRPType\", \"VRPType\" ], \"MaximumIndividualAmount\" : { \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" }, \"PeriodicLimits\" : [ { \"PeriodAlignment\" : \"Consent\", \"PeriodType\" : \"Day\", \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" }, { \"PeriodAlignment\" : \"Consent\", \"PeriodType\" : \"Day\", \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" } ] }, \"ReadRefundAccount\" : \"true\", \"ConsentId\" : \"ConsentId\", \"Initiation\" : { \"DebtorAccount\" : { \"SecondaryIdentification\" : \"SecondaryIdentification\", \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" }, \"CreditorAgent\" : { \"PostalAddress\" : { \"StreetName\" : \"StreetName\", \"CountrySubDivision\" : \"CountrySubDivision\", \"Department\" : \"Department\", \"AddressLine\" : [ \"AddressLine\", \"AddressLine\", \"AddressLine\", \"AddressLine\", \"AddressLine\" ], \"BuildingNumber\" : \"BuildingNumber\", \"TownName\" : \"TownName\", \"Country\" : \"Country\", \"SubDepartment\" : \"SubDepartment\", \"AddressType\" : \"AddressType\", \"PostCode\" : \"PostCode\" }, \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" }, \"RemittanceInformation\" : { \"Unstructured\" : \"Unstructured\", \"Reference\" : \"Reference\" }, \"CreditorAccount\" : { \"SecondaryIdentification\" : \"SecondaryIdentification\", \"SchemeName\" : \"SchemeName\", \"Identification\" : \"Identification\", \"Name\" : \"Name\" } } } }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

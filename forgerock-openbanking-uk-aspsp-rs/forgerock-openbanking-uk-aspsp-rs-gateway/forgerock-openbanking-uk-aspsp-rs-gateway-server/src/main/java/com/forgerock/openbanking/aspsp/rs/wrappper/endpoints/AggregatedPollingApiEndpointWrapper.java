/**
 * Copyright 2019 ForgeRock AS.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.forgerock.openbanking.aspsp.rs.wrappper.endpoints;

import com.forgerock.openbanking.aspsp.rs.wrappper.RSEndpointWrapperService;
import com.forgerock.openbanking.common.model.version.OBVersion;
import com.forgerock.openbanking.common.services.store.tpp.TppStoreService;
import com.forgerock.openbanking.constants.OIDCConstants;
import com.forgerock.openbanking.constants.OpenBankingConstants;
import com.forgerock.openbanking.constants.OpenBankingConstants.Scope;
import com.forgerock.openbanking.exceptions.OBErrorException;
import com.forgerock.openbanking.jwt.exceptions.InvalidTokenException;
import com.forgerock.openbanking.model.error.OBRIErrorType;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import uk.org.openbanking.OBConstants;

import java.io.IOException;
import java.text.ParseException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static com.forgerock.openbanking.model.error.OBRIErrorType.SERVER_ERROR;


@Component
@Slf4j
public class AggregatedPollingApiEndpointWrapper extends RSEndpointWrapper<AggregatedPollingApiEndpointWrapper, AggregatedPollingApiEndpointWrapper.AggregatedPollingRestEndpointContent> {

    public AggregatedPollingApiEndpointWrapper(RSEndpointWrapperService RSEndpointWrapperService,
                                               TppStoreService tppStoreService) {
        super(RSEndpointWrapperService, tppStoreService);
    }

    @Override
    protected ResponseEntity run(AggregatedPollingRestEndpointContent main) throws OBErrorException {
        return main.run(oAuth2ClientId);
    }

    @Override
    public void verifyAccessToken(List<String> expectedScopes, List<OIDCConstants.GrantType> expectedGrantTypes) throws OBErrorException {
        try {
            //Verify access token
            log.info("Verify the access token {}", authorization);
            accessToken = rsEndpointWrapperService.amResourceServerService.verifyAccessToken(authorization);
            List<String> scopes = (List<String>) accessToken.getJWTClaimsSet().getClaim(OBConstants.OIDCClaim.SCOPE);

            String grantTypeSerialised = accessToken.getJWTClaimsSet().getStringClaim(OBConstants.OIDCClaim.GRANT_TYPE);
            if (grantTypeSerialised == null) {
                log.error("We managed to get an access token that doesn't have a grant type claim defined: {}", authorization);
                throw new OBErrorException(SERVER_ERROR,
                        "Access token grant type is undefined"
                );
            }
            OIDCConstants.GrantType grantType = OIDCConstants.GrantType.fromType(grantTypeSerialised);

            if (!OIDCConstants.GrantType.REFRESH_TOKEN.equals(grantType) && !expectedGrantTypes.contains(grantType)) {
                log.debug("The access token grant type {} doesn't match one of the expected grant types {}", grantType, expectedGrantTypes);
                throw new OBErrorException(OBRIErrorType.ACCESS_TOKEN_INVALID_GRANT_TYPE,
                        grantType, expectedGrantTypes
                );
            }


            if (scopes.stream().noneMatch(expectedScopes::contains)) {
                log.warn("The access token {} contains scopes: {} but needs at least one of the expected scopes: {}", authorization, scopes, expectedScopes);
                throw new OBErrorException(OBRIErrorType.ACCESS_TOKEN_INVALID_SCOPE,
                        expectedScopes
                );
            }
        } catch (ParseException e) {
            log.warn("Couldn't parse the the access token {}. It's probably not stateless and therefore, not " +
                    "an access token generated by our ASPSP-AS", authorization);
            throw new OBErrorException(OBRIErrorType.ACCESS_TOKEN_INVALID_FORMAT);
        } catch (InvalidTokenException e) {
            log.warn("Invalid access token {}", authorization);
            throw new OBErrorException(OBRIErrorType.ACCESS_TOKEN_INVALID,
                    e.getMessage()
            );
        } catch (IOException e) {
            log.error("IO exception", e);
            throw new OBErrorException(SERVER_ERROR, e.getMessage());
        }
    }

    @Override
    protected void applyFilters() throws OBErrorException {
        // Do not verify financial id as it is not required for events API from 3.1.2 onwards
        List scopes;
        if(obVersion.isBeforeVersion(OBVersion.v3_1_4)){
            scopes = Arrays.asList(Scope.EVENT_POLLING);
        } else if (obVersion.isBeforeVersion(OBVersion.v3_1_10)){
            scopes = Arrays.asList(Scope.ACCOUNTS, Scope.FUNDS_CONFIRMATIONS);
        } else {
            scopes = Arrays.asList(Scope.ACCOUNTS, Scope.FUNDS_CONFIRMATIONS, Scope.PAYMENTS);
        }
        verifyAccessToken(scopes,
                Collections.singletonList(
                        OIDCConstants.GrantType.CLIENT_CREDENTIAL
                )
        );

        verifyMatlsFromAccessToken();
    }

    public interface AggregatedPollingRestEndpointContent {
        ResponseEntity run(String tppId) throws OBErrorException;
    }
}

/**
 * Copyright 2019 ForgeRock AS.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.forgerock.openbanking.common.services.onboarding.registrationrequest;

import com.forgerock.openbanking.common.TestHelperFunctions;
import com.forgerock.openbanking.common.services.onboarding.configuration.OpenBankingDirectoryConfiguration;
import com.forgerock.openbanking.model.DirectorySoftwareStatement;
import com.forgerock.openbanking.common.error.exception.dynamicclientregistration.DynamicClientRegistrationErrorType;
import com.forgerock.openbanking.common.error.exception.dynamicclientregistration.DynamicClientRegistrationException;
import com.forgerock.openbanking.constants.OpenBankingConstants;
import com.nimbusds.jwt.JWTClaimsSet;
import com.nimbusds.jwt.SignedJWT;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;

import java.text.ParseException;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.catchThrowableOfType;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;


@RunWith(MockitoJUnitRunner.class)
public class DirectorySoftwareStatementFactoryTest {

    DirectorySoftwareStatementFactory softwareStatementFactory;


    @Before
    public void setup(){
        OpenBankingDirectoryConfiguration openbankingDirectoryConfiguration = new OpenBankingDirectoryConfiguration();
        openbankingDirectoryConfiguration.issuerId = "OpenBanking Ltd";
        this.softwareStatementFactory =
                new DirectorySoftwareStatementFactory(openbankingDirectoryConfiguration);
    }

    @Test
    public void succeedWithOBSSA_getSoftwareStatement() throws ParseException, DynamicClientRegistrationException {
        // Given
        String registrationRequestJwtSerialised = TestHelperFunctions.getValidOBSsaSerialised();
        SignedJWT registrationRequestJws = SignedJWT.parse(registrationRequestJwtSerialised);
        JWTClaimsSet ssaJwtClaims = registrationRequestJws.getJWTClaimsSet();
        RegistrationRequestJWTClaims ssaJWTClaims = new RegistrationRequestJWTClaims(ssaJwtClaims,
                JWTClaimsOrigin.REGISTRATION_REQUEST_JWT);

        // When
        DirectorySoftwareStatement statement = softwareStatementFactory.getSoftwareStatement(ssaJWTClaims);

        // Then
        assertThat(statement).isNotNull();
    }


    @Test
    @Ignore // As currently functional tests use Software Statements generated by FR Directory with no redirect URLs
    public void shouldFailWhenNoRedirectUrlInSsa_getSoftwareStatement() throws ParseException,
            DynamicClientRegistrationException {
        // Given
        String registrationRequestJwtSerialised = TestHelperFunctions.getValidSsaSerialised();
        SignedJWT registrationRequestJws = SignedJWT.parse(registrationRequestJwtSerialised);
        JWTClaimsSet ssaJwtClaims = registrationRequestJws.getJWTClaimsSet();
        RegistrationRequestJWTClaims jwtClaims = new RegistrationRequestJWTClaims(ssaJwtClaims,
                JWTClaimsOrigin.SOFTWARE_STATEMENT_ASSERTION);
        DynamicClientRegistrationException dce = new DynamicClientRegistrationException("Test throw",
                DynamicClientRegistrationErrorType.INVALID_REDIRECT_URI);
        RegistrationRequestJWTClaims spyJwtClaims = spy(jwtClaims);
        when(spyJwtClaims.getRequiredStringListClaims(OpenBankingConstants.SSAClaims.SOFTWARE_REDIRECT_URIS))
                .thenThrow(dce);

        // When
        DynamicClientRegistrationException exception =
                catchThrowableOfType( () -> softwareStatementFactory.getSoftwareStatement(spyJwtClaims),
                        DynamicClientRegistrationException.class);

        // Then
        assertThat(exception.getErrorType()).isEqualTo(DynamicClientRegistrationErrorType.INVALID_REDIRECT_URI);
    }

    @Test
    public void succeedWithFRSsa_getSoftwareStatement() throws ParseException, DynamicClientRegistrationException {
        // Given
        String registrationRequestJwtSerialised = TestHelperFunctions.getValidSsaSerialised();
        SignedJWT registrationRequestJws = SignedJWT.parse(registrationRequestJwtSerialised);
        JWTClaimsSet ssaJwtClaims = registrationRequestJws.getJWTClaimsSet();
        RegistrationRequestJWTClaims ssaJWTClaims = new RegistrationRequestJWTClaims(ssaJwtClaims,
                JWTClaimsOrigin.REGISTRATION_REQUEST_JWT);

        // When
        DirectorySoftwareStatement statement = softwareStatementFactory.getSoftwareStatement(ssaJWTClaims);

        // Then
        assertThat(statement).isNotNull();
    }
}